package com.psl.training.config;

import java.util.Properties;

import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.TransactionManager;

@Configuration // this annotation will tell spring that this class provides configurations
@ComponentScan(basePackages = "com.psl.training")
@PropertySource(value = "classpath:/application.properties")
public class BeanConfig {

// Establish Connection
	
	// resposible for making Connection with database 
	
	@Value("${mysql.driver.classname}")
	String driverClassName;
	
	@Value("${mysql.url}")
	String url;
	
	@Value("${mysql.username}")
	String username;
	
	@Value("${mysql.password}")
	String password;
	
	@Bean //(name="dataSource")
	public DataSource getDataSource() {
		DriverManagerDataSource datasource=new DriverManagerDataSource();
		datasource.setDriverClassName(driverClassName);
		datasource.setUrl(url);
		datasource.setUsername(username);
		datasource.setPassword(password);
		// url
		//username
		//password
		
		return datasource;
	}
	
	@Bean
	public LocalSessionFactoryBean getSessionFactoryBean() {
		
		LocalSessionFactoryBean sessionFactory=new LocalSessionFactoryBean();
		sessionFactory.setDataSource(getDataSource());
		
		// set the scan path where JPA Entity annotations are present 
		sessionFactory.setPackagesToScan("com.psl.training.model");
		
		// setting hibernate specific properties like show_sql
		
		Properties props=new Properties();
		// to print all the sql statements generated by hibernate
		props.put("hibernate.show_sql", "true");
		// Create Tables at back end with the help of Entity annotations present 
		props.put("hibernate.hbm2ddl.auto", "update"); // it will create table if not present and alter table if fields are not present as mentioned in Entity	
		
		sessionFactory.setHibernateProperties(props);
		return sessionFactory;
		
	}
	
	// JDBC Template will help to execute Queries
	/*
	 * @Bean public JdbcTemplate getJdbcTemplate() { JdbcTemplate jdbcTemplate =new
	 * JdbcTemplate(); jdbcTemplate.setDataSource(getDataSource()); return
	 * jdbcTemplate; }
	 */
	
	@Bean
	public TransactionManager getTransactionManager() {
		SessionFactory sessionFactory=getSessionFactoryBean().getObject();
		HibernateTransactionManager transactionManager=new HibernateTransactionManager();
		transactionManager.setSessionFactory(sessionFactory);
		return transactionManager;
	}
	
}
